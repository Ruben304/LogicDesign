module top ( clk_i, reset_i, mode_switch, set_hrs, set_min, set_sec, set_time, digit_select,//seven-7seg //switch?
                        b_1, b_2, b_3, b_4, b_5,
                                hrs, min, sec, 
                                    out, S); //buttons 1-5

    input clk_i, reset_i, set_time;
    input [1:0] S;
    input [5:0] set_hrs;
    input  [4:0] set_min;
    input  [4:0] set_sec;
//    input [9:0] ms_set;
    output [3:0] out;
    reg [3:0] out_o;
    output reg [2:0] digit_select; //timer switch
    
    input [3:0] mode_switch; //mode switch
    input b_1, b_2, b_3, b_4, b_5; //buttons2-5 timer
    //input [6:0] switch; 
    //output [6:0] seven;
    output [5:0] hrs; 
     output [4:0] min; 
      output [4:0] sec; 
      //output [9:0] ms;
    
    wire CD1; //CLOCK DIVIDER 1KHZ, DB

//    wire [15:0] C16; //COUNTER16
//    wire [3:0] DS; //DIGIT SELECT WIRE
//    reg switch; //SWITCH
    
    wire DC12_HRS, DC12_MIN ,DC12_SEC, DC24_HRS, DC24_MIN, DC24_SEC , TI_HRS, TI_MIN, TI_SEC, SW_HRS, SW_MIN, SW_SEC; //12HR, 24HR, TIMER, STOPWATCH
    
    reg [5:0] hrs;
    reg [4:0] min, sec;
//    reg [9:0] ms;
    
    clk_divider_1khz CC1(.clock_in( clk_i ),.clock_out  ( CD1 ));
    
    digital_clk_12hr DC1( .clk_i( CD1 ), .reset_i( reset_i ), .Timeset( set_time ), .Hourset( set_hrs ), .Minset( set_min ), .Secset( set_sec ), .sec_o( sec ), 
                                .min_o( min ), .hour_o( hrs )); 
    digital_clk_24hr DC2( .clk_i( CD1 ) ,.reset_i( reset_i ), .Timeset( set_time ), .Hourset( set_hrs ), .Minset( set_min ), .Secset( set_sec ), .sec_o( sec ), 
                                .min_o( min ), .hour_o( hrs )); 
    
    stopwatch SW1( .clk_i( clk_i ), .reset_i( reset_i ), .start_stop( b_1  ), .Timeset( set_time ), .Hourset( set_hrs ), .Minset(  set_min  ), 
                                .Secset( set_sec  ), .sec_o( sec  ), .min_o( min ), .hour_o( hrs ) );
    timer_no_ms TM1( .clk_i( clk_i   ), .reset_i(  reset_i ), .start_i( b_1 ), .left_i( b_2 ), .right_i( b_3  ), .up_i( b_4 ), .down_i( b_5 ), .sec_o( sec   ), 
                .min_o( min  ), .hour_o( hrs ), .digitp( digit_select   )); 
    
    //  MUX  
    always@(mode_switch) begin
        case (S)
        2'b00: out_o= 2'b00;
        2'b01: out_o= 2'b01;
        2'b10: out_o= 2'b10;
        2'b11: out_o= 2'b11;
        endcase
    end//always
    assign out= out_o;
    if (out_o==2'b00) 
        begin
        
        
        else if (out_o==01)
    
    top_square(
   CLK ,             // board clock: 100 MHz on Arty/Basys3/Nexys
    RST_BTN,
    hrs_set,
    min_set,
    sec_set,
    ms_set,
    VGA_HS_O,       // horizontal sync output
    VGA_VS_O,       // vertical sync output
    VGA_R,    // 4-bit VGA red output
    VGA_G,    // 4-bit VGA green output
    VGA_B     // 4-bit VGA blue output
    );
    
   
// MUX 
//    always @ (posedge clk_i) begin
//        if (mode_switch) begin
//            temp<=CD1;
//            end else begin
//            temp<=DB;
//        end
//    end//always
    
endmodule
